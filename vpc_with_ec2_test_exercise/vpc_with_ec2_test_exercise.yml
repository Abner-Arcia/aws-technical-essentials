Resources:
  CustomVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: false
      EnableDnsSupport: true
      InstanceTenancy: "default"
      # Ipv4IpamPoolId: String
      # Ipv4NetmaskLength: Integer
      Tags: 
        - Key: "Name"
          Value: "abner-custom-vpc"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: "Name"
          Value: "abner-igw"
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: CustomVPC
      # VpnGatewayId: String
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      # AssignIpv6AddressOnCreation: Boolean
      AvailabilityZone: "us-east-1a"
      # AvailabilityZoneId: String
      CidrBlock: "10.0.1.0/24"
      # EnableDns64: Boolean
      # Ipv4NetmaskLength: Integer
      # Ipv6CidrBlock: String
      # Ipv6Native: Boolean
      # Ipv6NetmaskLength: Integer
      MapPublicIpOnLaunch: false
      # OutpostArn: String
      # PrivateDnsNameOptionsOnLaunch:
      #   PrivateDnsNameOptionsOnLaunch
      Tags: 
        - Key: "Name"
          Value: "abner-private-subnet-a"
      VpcId:
        Ref: CustomVPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: "Name"
          Value: "abner-public-subnet-a"
      VpcId:
        Ref: CustomVPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: "Name"
          Value: "abner-public-rt"
      VpcId:
        Ref: CustomVPC
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetA
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      # CarrierGatewayId: String
      DestinationCidrBlock: "0.0.0.0/0"
      # DestinationIpv6CidrBlock: String
      # DestinationPrefixListId: String
      # EgressOnlyInternetGatewayId: String
      GatewayId:
        Ref: InternetGateway
      # InstanceId: String
      # LocalGatewayId: String
      # NatGatewayId: String
      # NetworkInterfaceId: String
      RouteTableId:
        Ref: PublicRouteTable
      # TransitGatewayId: String
      # VpcEndpointId: String
      # VpcPeeringConnectionId: String
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SG for a web server"
      GroupName: "abner-web-server-sg"
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          # CidrIpv6: String
          Description: "Allow HTTP traffic"
          # DestinationPrefixListId: String
          # DestinationSecurityGroupId: String
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          Description: "Allow HTTPS traffic"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          Description: "Allow SSH traffic"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          # CidrIpv6: String
          Description: "Allow HTTP traffic"
          FromPort: 80
          IpProtocol: "tcp"
          # SourcePrefixListId: String
          # SourceSecurityGroupId: String
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          Description: "Allow HTTPS traffic"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
        - CidrIp: "0.0.0.0/0"
          Description: "Allow SSH traffic"
          FromPort: 22
          IpProtocol: "tcp"
          ToPort: 22
      Tags:
        - Key: "Name"
          Value: "abner-web-server-sg"
      VpcId:
        Ref: CustomVPC
  NetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags: 
        - Key: "Name"
          Value: "abner-network-acl"
      VpcId:
        Ref: CustomVPC
  HTTPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      # Icmp: 
      #   Icmp
      # Ipv6CidrBlock: String
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 100
  HTTPSInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 200
  SSHInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 300
  RDPInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 400
  EphemeralPortsInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: false
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 500
  HTTPOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 100
  HTTPSOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 200
  SSHOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 300
  RDPOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 400
  EphemeralPortsOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: "0.0.0.0/0"
      Egress: true
      NetworkAclId:
        Ref: NetworkACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # TCP
      RuleAction: "allow"
      RuleNumber: 500
  PublicSubnetNetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: NetworkACL
      SubnetId:
        Ref: PublicSubnetA
  ############ Practice 1 Public instance acting as a web server ############
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: "us-east-1a"
      ImageId: "ami-0230bd60aa48260c6"
      InstanceType: "t2.micro"
      KeyName: "abner-web-server-key" # Key should be created before the CloudFormation stack
      SecurityGroupIds: 
        - Ref: WebServerSecurityGroup
      SubnetId:
        Ref: PublicSubnetA
      Tags: 
        - Key: "Name"
          Value: "abner-web-server"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
      Volumes: 
        - Device: "/dev/sdf"
          VolumeId:
            Ref: WebServerVolume
  WebServerVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: "us-east-1a"
      Size: 15
      Tags: 
        - Key: "Name"
          Value: "abner-web-server-volume"
      VolumeType: "gp3"
  ############ Practice 2 Private instance with internet access via NAT gateway ############
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: "us-east-1a"
      ImageId: "ami-0cd601a22ac9e6d79"
      InstanceType: "t2.micro"
      KeyName: "abner-web-server-key" # Key should be created before the CloudFormation stack
      SecurityGroupIds: 
        - Ref: BastionInstanceSecurityGroup
      SubnetId:
        Ref: PublicSubnetA
      Tags: 
        - Key: "Name"
          Value: "abner-bastion-instance"
  BastionInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SG for a bastion instance"
      GroupName: "abner-bastion-instance-sg"
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          Description: "Allow RDP traffic"
          FromPort: 3389
          IpProtocol: "tcp"
          ToPort: 3389
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow RDP traffic"
          FromPort: 3389
          IpProtocol: "tcp"
          ToPort: 3389
      Tags:
        - Key: "Name"
          Value: "abner-bastion-instance-sg"
      VpcId:
        Ref: CustomVPC
  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: "us-east-1a"
      ImageId: "ami-0cd601a22ac9e6d79"
      InstanceType: "t2.micro"
      KeyName: "abner-web-server-key" # Key should be created before the CloudFormation stack
      SecurityGroupIds: 
        - Ref: PrivateInstanceSecurityGroup
      SubnetId:
        Ref: PrivateSubnetA
      Tags: 
        - Key: "Name"
          Value: "abner-private-instance"
  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SG for a private instance"
      GroupName: "abner-private-instance-sg"
      SecurityGroupEgress: 
        - CidrIp: "0.0.0.0/0"
          Description: "Allow HTTP traffic"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          Description: "Allow HTTPS traffic"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
        - Description: "Allow RDP traffic"
          FromPort: 3389
          IpProtocol: "tcp"
          DestinationSecurityGroupId:
            Ref: BastionInstanceSecurityGroup
          ToPort: 3389
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allow HTTP traffic"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          Description: "Allow HTTPS traffic"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
        - Description: "Allow RDP traffic"
          FromPort: 3389
          IpProtocol: "tcp"
          SourceSecurityGroupId:
            Ref: BastionInstanceSecurityGroup
          ToPort: 3389
      Tags:
        - Key: "Name"
          Value: "abner-private-instance-sg"
      VpcId:
        Ref: CustomVPC
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt: [ElasticIp, AllocationId]
      ConnectivityType: "public"
      # MaxDrainDurationSeconds: Integer
      # PrivateIpAddress: String
      # SecondaryAllocationIds:
      #   - String
      # SecondaryPrivateIpAddressCount: Integer
      # SecondaryPrivateIpAddresses:
      #   - String
      SubnetId:
        Ref: PublicSubnetA
      Tags:
        - Key: "Name"
          Value: "abner-nat-gateway"
  ElasticIp:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: "vpc"
      # InstanceId: String
      # NetworkBorderGroup: String
      # PublicIpv4Pool: String
      Tags: 
        - Key: "Name"
          Value: "abner-nat-gateway-eip"
      # TransferAddress: String
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags: 
        - Key: "Name"
          Value: "abner-private-rt"
      VpcId:
        Ref: CustomVPC
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnetA
  NATRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: NATGateway
      RouteTableId:
        Ref: PrivateRouteTable